# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:30:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class AWSKMSKeyARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class AmazonOpenSearchServerlessBufferingIntervalInSeconds(
    RootModel[conint(ge=60, le=900)]
):
    root: conint(ge=60, le=900)


class AmazonOpenSearchServerlessBufferingSizeInMBs(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class AmazonOpenSearchServerlessCollectionEndpoint(
    RootModel[constr(pattern=r'https:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'https:.*', min_length=1, max_length=512)


class AmazonOpenSearchServerlessIndexName(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=80)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=80)


class AmazonOpenSearchServerlessRetryDurationInSeconds(
    RootModel[conint(ge=0, le=7200)]
):
    root: conint(ge=0, le=7200)


class AmazonOpenSearchServerlessRetryOptions(BaseModel):
    DurationInSeconds: Optional[AmazonOpenSearchServerlessRetryDurationInSeconds] = None


class AmazonOpenSearchServerlessS3BackupMode(Enum):
    FailedDocumentsOnly = 'FailedDocumentsOnly'
    AllDocuments = 'AllDocuments'


class AmazonopensearchserviceBufferingIntervalInSeconds(
    RootModel[conint(ge=60, le=900)]
):
    root: conint(ge=60, le=900)


class AmazonopensearchserviceBufferingSizeInMBs(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class AmazonopensearchserviceClusterEndpoint(
    RootModel[constr(pattern=r'https:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'https:.*', min_length=1, max_length=512)


class AmazonopensearchserviceDomainARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class AmazonopensearchserviceIndexName(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=80)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=80)


class AmazonopensearchserviceIndexRotationPeriod(Enum):
    NoRotation = 'NoRotation'
    OneHour = 'OneHour'
    OneDay = 'OneDay'
    OneWeek = 'OneWeek'
    OneMonth = 'OneMonth'


class AmazonopensearchserviceRetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class AmazonopensearchserviceRetryOptions(BaseModel):
    DurationInSeconds: Optional[AmazonopensearchserviceRetryDurationInSeconds] = None


class AmazonopensearchserviceS3BackupMode(Enum):
    FailedDocumentsOnly = 'FailedDocumentsOnly'
    AllDocuments = 'AllDocuments'


class AmazonopensearchserviceTypeName(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=100)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=100)


class BlockSizeBytes(RootModel[conint(ge=67108864)]):
    root: conint(ge=67108864)


class BooleanObject(RootModel[bool]):
    root: bool


class BucketARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class ClusterJDBCURL(
    RootModel[
        constr(
            pattern=r'jdbc:(redshift|postgresql)://((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+redshift\.([a-zA-Z0-9\.]+):\d{1,5}/[a-zA-Z0-9_$-]+',
            min_length=1,
            max_length=512,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'jdbc:(redshift|postgresql)://((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+redshift\.([a-zA-Z0-9\.]+):\d{1,5}/[a-zA-Z0-9_$-]+',
        min_length=1,
        max_length=512,
    )


class CompressionFormat(Enum):
    UNCOMPRESSED = 'UNCOMPRESSED'
    GZIP = 'GZIP'
    ZIP = 'ZIP'
    Snappy = 'Snappy'
    HADOOP_SNAPPY = 'HADOOP_SNAPPY'


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ContentEncoding(Enum):
    NONE = 'NONE'
    GZIP = 'GZIP'


class CopyOptions(RootModel[constr(pattern=r'.*', min_length=0, max_length=204800)]):
    root: constr(pattern=r'.*', min_length=0, max_length=204800)


class Data(RootModel[constr(min_length=0, max_length=1024000)]):
    root: constr(min_length=0, max_length=1024000)


class DataTableColumns(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=204800)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=204800)


class DataTableName(RootModel[constr(pattern=r'.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'.*', min_length=1, max_length=512)


class DeleteDeliveryStreamOutput(BaseModel):
    pass


class DeliveryStartTimestamp(RootModel[datetime]):
    root: datetime


class DeliveryStreamARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class DeliveryStreamEncryptionStatus(Enum):
    ENABLED = 'ENABLED'
    ENABLING = 'ENABLING'
    ENABLING_FAILED = 'ENABLING_FAILED'
    DISABLED = 'DISABLED'
    DISABLING = 'DISABLING'
    DISABLING_FAILED = 'DISABLING_FAILED'


class DeliveryStreamFailureType(Enum):
    RETIRE_KMS_GRANT_FAILED = 'RETIRE_KMS_GRANT_FAILED'
    CREATE_KMS_GRANT_FAILED = 'CREATE_KMS_GRANT_FAILED'
    KMS_ACCESS_DENIED = 'KMS_ACCESS_DENIED'
    DISABLED_KMS_KEY = 'DISABLED_KMS_KEY'
    INVALID_KMS_KEY = 'INVALID_KMS_KEY'
    KMS_KEY_NOT_FOUND = 'KMS_KEY_NOT_FOUND'
    KMS_OPT_IN_REQUIRED = 'KMS_OPT_IN_REQUIRED'
    CREATE_ENI_FAILED = 'CREATE_ENI_FAILED'
    DELETE_ENI_FAILED = 'DELETE_ENI_FAILED'
    SUBNET_NOT_FOUND = 'SUBNET_NOT_FOUND'
    SECURITY_GROUP_NOT_FOUND = 'SECURITY_GROUP_NOT_FOUND'
    ENI_ACCESS_DENIED = 'ENI_ACCESS_DENIED'
    SUBNET_ACCESS_DENIED = 'SUBNET_ACCESS_DENIED'
    SECURITY_GROUP_ACCESS_DENIED = 'SECURITY_GROUP_ACCESS_DENIED'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'


class DeliveryStreamName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=64)


class DeliveryStreamNameList(RootModel[List[DeliveryStreamName]]):
    root: List[DeliveryStreamName]


class DeliveryStreamStatus(Enum):
    CREATING = 'CREATING'
    CREATING_FAILED = 'CREATING_FAILED'
    DELETING = 'DELETING'
    DELETING_FAILED = 'DELETING_FAILED'
    ACTIVE = 'ACTIVE'


class DeliveryStreamType(Enum):
    DirectPut = 'DirectPut'
    KinesisStreamAsSource = 'KinesisStreamAsSource'


class DeliveryStreamVersionId(
    RootModel[constr(pattern=r'[0-9]+', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[0-9]+', min_length=1, max_length=50)


class DescribeDeliveryStreamInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class DestinationId(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=100)


class ElasticsearchBufferingIntervalInSeconds(RootModel[conint(ge=60, le=900)]):
    root: conint(ge=60, le=900)


class ElasticsearchBufferingSizeInMBs(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ElasticsearchClusterEndpoint(
    RootModel[constr(pattern=r'https:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'https:.*', min_length=1, max_length=512)


class ElasticsearchDomainARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class ElasticsearchIndexName(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=80)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=80)


class ElasticsearchIndexRotationPeriod(Enum):
    NoRotation = 'NoRotation'
    OneHour = 'OneHour'
    OneDay = 'OneDay'
    OneWeek = 'OneWeek'
    OneMonth = 'OneMonth'


class ElasticsearchRetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class ElasticsearchRetryOptions(BaseModel):
    DurationInSeconds: Optional[ElasticsearchRetryDurationInSeconds] = None


class ElasticsearchS3BackupMode(Enum):
    FailedDocumentsOnly = 'FailedDocumentsOnly'
    AllDocuments = 'AllDocuments'


class ElasticsearchTypeName(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=100)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=100)


class ErrorCode(RootModel[str]):
    root: str


class ErrorMessage(RootModel[str]):
    root: str


class ErrorOutputPrefix(
    RootModel[constr(pattern=r'.*', min_length=0, max_length=1024)]
):
    root: constr(pattern=r'.*', min_length=0, max_length=1024)


class HECAcknowledgmentTimeoutInSeconds(RootModel[conint(ge=180, le=600)]):
    root: conint(ge=180, le=600)


class HECEndpoint(RootModel[constr(pattern=r'.*', min_length=0, max_length=2048)]):
    root: constr(pattern=r'.*', min_length=0, max_length=2048)


class HECEndpointType(Enum):
    Raw = 'Raw'
    Event = 'Event'


class HECToken(RootModel[constr(pattern=r'.*', min_length=0, max_length=2048)]):
    root: constr(pattern=r'.*', min_length=0, max_length=2048)


class HttpEndpointAccessKey(RootModel[SecretStr]):
    root: SecretStr


class HttpEndpointAttributeName(RootModel[SecretStr]):
    root: SecretStr


class HttpEndpointAttributeValue(RootModel[SecretStr]):
    root: SecretStr


class HttpEndpointBufferingIntervalInSeconds(RootModel[conint(ge=60, le=900)]):
    root: conint(ge=60, le=900)


class HttpEndpointBufferingSizeInMBs(RootModel[conint(ge=1, le=64)]):
    root: conint(ge=1, le=64)


class HttpEndpointCommonAttribute(BaseModel):
    AttributeName: HttpEndpointAttributeName
    AttributeValue: HttpEndpointAttributeValue


class HttpEndpointCommonAttributesList(RootModel[List[HttpEndpointCommonAttribute]]):
    root: List[HttpEndpointCommonAttribute] = Field(..., max_length=50, min_length=0)


class HttpEndpointName(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=256)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=256)


class HttpEndpointRequestConfiguration(BaseModel):
    CommonAttributes: Optional[HttpEndpointCommonAttributesList] = None
    ContentEncoding_1: Optional[ContentEncoding] = Field(None, alias='ContentEncoding')


class HttpEndpointRetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class HttpEndpointRetryOptions(BaseModel):
    DurationInSeconds: Optional[HttpEndpointRetryDurationInSeconds] = None


class HttpEndpointS3BackupMode(Enum):
    FailedDataOnly = 'FailedDataOnly'
    AllData = 'AllData'


class HttpEndpointUrl(RootModel[SecretStr]):
    root: SecretStr


class IntervalInSeconds(RootModel[conint(ge=60, le=900)]):
    root: conint(ge=60, le=900)


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidKMSResourceException(RootModel[Any]):
    root: Any


class KMSEncryptionConfig(BaseModel):
    AWSKMSKeyARN_1: AWSKMSKeyARN = Field(..., alias='AWSKMSKeyARN')


class KeyType(Enum):
    AWS_OWNED_CMK = 'AWS_OWNED_CMK'
    CUSTOMER_MANAGED_CMK = 'CUSTOMER_MANAGED_CMK'


class KinesisStreamARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListDeliveryStreamsInputLimit(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ListDeliveryStreamsOutput(BaseModel):
    DeliveryStreamNames: DeliveryStreamNameList
    HasMoreDeliveryStreams: BooleanObject


class ListTagsForDeliveryStreamInputLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class LogGroupName(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=0, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=0, max_length=512)


class LogStreamName(RootModel[constr(pattern=r'[^:*]*', min_length=0, max_length=512)]):
    root: constr(pattern=r'[^:*]*', min_length=0, max_length=512)


class NoEncryptionConfig(Enum):
    NoEncryption = 'NoEncryption'


class NonEmptyString(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=1024)


class NonEmptyStringWithoutWhitespace(
    RootModel[constr(pattern=r'^\S+$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^\S+$', min_length=1, max_length=1024)


class NonNegativeIntegerObject(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class OrcCompression(Enum):
    NONE = 'NONE'
    ZLIB = 'ZLIB'
    SNAPPY = 'SNAPPY'


class OrcFormatVersion(Enum):
    V0_11 = 'V0_11'
    V0_12 = 'V0_12'


class OrcRowIndexStride(RootModel[conint(ge=1000)]):
    root: conint(ge=1000)


class OrcStripeSizeBytes(RootModel[conint(ge=8388608)]):
    root: conint(ge=8388608)


class ParquetCompression(Enum):
    UNCOMPRESSED = 'UNCOMPRESSED'
    GZIP = 'GZIP'
    SNAPPY = 'SNAPPY'


class ParquetPageSizeBytes(RootModel[conint(ge=65536)]):
    root: conint(ge=65536)


class ParquetWriterVersion(Enum):
    V1 = 'V1'
    V2 = 'V2'


class Password(RootModel[SecretStr]):
    root: SecretStr


class Prefix(RootModel[constr(pattern=r'.*', min_length=0, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=0, max_length=1024)


class ProcessorParameterName(Enum):
    LambdaArn = 'LambdaArn'
    NumberOfRetries = 'NumberOfRetries'
    MetadataExtractionQuery = 'MetadataExtractionQuery'
    JsonParsingEngine = 'JsonParsingEngine'
    RoleArn = 'RoleArn'
    BufferSizeInMBs = 'BufferSizeInMBs'
    BufferIntervalInSeconds = 'BufferIntervalInSeconds'
    SubRecordType = 'SubRecordType'
    Delimiter = 'Delimiter'


class ProcessorParameterValue(
    RootModel[constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=5120)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s*$).+', min_length=1, max_length=5120)


class ProcessorType(Enum):
    RecordDeAggregation = 'RecordDeAggregation'
    Lambda = 'Lambda'
    MetadataExtraction = 'MetadataExtraction'
    AppendDelimiterToRecord = 'AppendDelimiterToRecord'


class Proportion(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class PutResponseRecordId(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class Record(BaseModel):
    Data_1: Data = Field(..., alias='Data')


class RedshiftRetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class RedshiftRetryOptions(BaseModel):
    DurationInSeconds: Optional[RedshiftRetryDurationInSeconds] = None


class RedshiftS3BackupMode(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class RetryOptions(BaseModel):
    DurationInSeconds: Optional[RetryDurationInSeconds] = None


class RoleARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=512)


class S3BackupMode(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'


class SchemaConfiguration(BaseModel):
    CatalogId: Optional[NonEmptyStringWithoutWhitespace] = None
    DatabaseName: Optional[NonEmptyStringWithoutWhitespace] = None
    Region: Optional[NonEmptyStringWithoutWhitespace] = None
    RoleARN: Optional[NonEmptyStringWithoutWhitespace] = None
    TableName: Optional[NonEmptyStringWithoutWhitespace] = None
    VersionId: Optional[NonEmptyStringWithoutWhitespace] = None


class SecurityGroupIdList(RootModel[List[NonEmptyStringWithoutWhitespace]]):
    root: List[NonEmptyStringWithoutWhitespace] = Field(..., max_length=5, min_length=1)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SizeInMBs(RootModel[conint(ge=1, le=128)]):
    root: conint(ge=1, le=128)


class SplunkRetryDurationInSeconds(RootModel[conint(ge=0, le=7200)]):
    root: conint(ge=0, le=7200)


class SplunkRetryOptions(BaseModel):
    DurationInSeconds: Optional[SplunkRetryDurationInSeconds] = None


class SplunkS3BackupMode(Enum):
    FailedEventsOnly = 'FailedEventsOnly'
    AllEvents = 'AllEvents'


class StartDeliveryStreamEncryptionOutput(BaseModel):
    pass


class StopDeliveryStreamEncryptionInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')


class StopDeliveryStreamEncryptionOutput(BaseModel):
    pass


class SubnetIdList(RootModel[List[NonEmptyStringWithoutWhitespace]]):
    root: List[NonEmptyStringWithoutWhitespace] = Field(
        ..., max_length=16, min_length=1
    )


class TagDeliveryStreamOutput(BaseModel):
    pass


class TagKey(
    RootModel[
        constr(
            pattern=r'^(?!aws:)[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$',
            min_length=1,
            max_length=128,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!aws:)[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(
    RootModel[
        constr(pattern=r'^[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$', min_length=0, max_length=256
    )


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagDeliveryStreamInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    TagKeys: TagKeyList


class UntagDeliveryStreamOutput(BaseModel):
    pass


class UpdateDestinationOutput(BaseModel):
    pass


class Username(RootModel[SecretStr]):
    root: SecretStr


class VpcConfiguration(BaseModel):
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    SecurityGroupIds: SecurityGroupIdList
    SubnetIds: SubnetIdList


class VpcConfigurationDescription(BaseModel):
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    SecurityGroupIds: SecurityGroupIdList
    SubnetIds: SubnetIdList
    VpcId: NonEmptyStringWithoutWhitespace


class XAmzTarget(Enum):
    Firehose_20150804_CreateDeliveryStream = 'Firehose_20150804.CreateDeliveryStream'


class XAmzTarget1(Enum):
    Firehose_20150804_DeleteDeliveryStream = 'Firehose_20150804.DeleteDeliveryStream'


class XAmzTarget2(Enum):
    Firehose_20150804_DescribeDeliveryStream = (
        'Firehose_20150804.DescribeDeliveryStream'
    )


class XAmzTarget3(Enum):
    Firehose_20150804_ListDeliveryStreams = 'Firehose_20150804.ListDeliveryStreams'


class XAmzTarget4(Enum):
    Firehose_20150804_ListTagsForDeliveryStream = (
        'Firehose_20150804.ListTagsForDeliveryStream'
    )


class XAmzTarget5(Enum):
    Firehose_20150804_PutRecord = 'Firehose_20150804.PutRecord'


class XAmzTarget6(Enum):
    Firehose_20150804_PutRecordBatch = 'Firehose_20150804.PutRecordBatch'


class XAmzTarget7(Enum):
    Firehose_20150804_StartDeliveryStreamEncryption = (
        'Firehose_20150804.StartDeliveryStreamEncryption'
    )


class XAmzTarget8(Enum):
    Firehose_20150804_StopDeliveryStreamEncryption = (
        'Firehose_20150804.StopDeliveryStreamEncryption'
    )


class XAmzTarget9(Enum):
    Firehose_20150804_TagDeliveryStream = 'Firehose_20150804.TagDeliveryStream'


class XAmzTarget10(Enum):
    Firehose_20150804_UntagDeliveryStream = 'Firehose_20150804.UntagDeliveryStream'


class XAmzTarget11(Enum):
    Firehose_20150804_UpdateDestination = 'Firehose_20150804.UpdateDestination'


class AmazonOpenSearchServerlessBufferingHints(BaseModel):
    IntervalInSeconds: Optional[
        AmazonOpenSearchServerlessBufferingIntervalInSeconds
    ] = None
    SizeInMBs: Optional[AmazonOpenSearchServerlessBufferingSizeInMBs] = None


class AmazonopensearchserviceBufferingHints(BaseModel):
    IntervalInSeconds: Optional[AmazonopensearchserviceBufferingIntervalInSeconds] = (
        None
    )
    SizeInMBs: Optional[AmazonopensearchserviceBufferingSizeInMBs] = None


class BufferingHints(BaseModel):
    IntervalInSeconds_1: Optional[IntervalInSeconds] = Field(
        None, alias='IntervalInSeconds'
    )
    SizeInMBs_1: Optional[SizeInMBs] = Field(None, alias='SizeInMBs')


class CloudWatchLoggingOptions(BaseModel):
    Enabled: Optional[BooleanObject] = None
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    LogStreamName_1: Optional[LogStreamName] = Field(None, alias='LogStreamName')


class ColumnToJsonKeyMappings(RootModel[Optional[Dict[str, NonEmptyString]]]):
    root: Optional[Dict[str, NonEmptyString]] = None


class CopyCommand(BaseModel):
    CopyOptions_1: Optional[CopyOptions] = Field(None, alias='CopyOptions')
    DataTableColumns_1: Optional[DataTableColumns] = Field(
        None, alias='DataTableColumns'
    )
    DataTableName_1: DataTableName = Field(..., alias='DataTableName')


class CreateDeliveryStreamOutput(BaseModel):
    DeliveryStreamARN_1: Optional[DeliveryStreamARN] = Field(
        None, alias='DeliveryStreamARN'
    )


class DeleteDeliveryStreamInput(BaseModel):
    AllowForceDelete: Optional[BooleanObject] = None
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')


class DeliveryStreamEncryptionConfigurationInput(BaseModel):
    KeyARN: Optional[AWSKMSKeyARN] = None
    KeyType_1: KeyType = Field(..., alias='KeyType')


class DescribeDeliveryStreamInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    ExclusiveStartDestinationId: Optional[DestinationId] = None
    Limit: Optional[DescribeDeliveryStreamInputLimit] = None


class DynamicPartitioningConfiguration(BaseModel):
    Enabled: Optional[BooleanObject] = None
    RetryOptions_1: Optional[RetryOptions] = Field(None, alias='RetryOptions')


class ElasticsearchBufferingHints(BaseModel):
    IntervalInSeconds: Optional[ElasticsearchBufferingIntervalInSeconds] = None
    SizeInMBs: Optional[ElasticsearchBufferingSizeInMBs] = None


class EncryptionConfiguration(BaseModel):
    KMSEncryptionConfig_1: Optional[KMSEncryptionConfig] = Field(
        None, alias='KMSEncryptionConfig'
    )
    NoEncryptionConfig_1: Optional[NoEncryptionConfig] = Field(
        None, alias='NoEncryptionConfig'
    )


class FailureDescription(BaseModel):
    Details: NonEmptyString
    Type: DeliveryStreamFailureType


class HttpEndpointBufferingHints(BaseModel):
    IntervalInSeconds: Optional[HttpEndpointBufferingIntervalInSeconds] = None
    SizeInMBs: Optional[HttpEndpointBufferingSizeInMBs] = None


class HttpEndpointConfiguration(BaseModel):
    AccessKey: Optional[HttpEndpointAccessKey] = None
    Name: Optional[HttpEndpointName] = None
    Url: HttpEndpointUrl


class HttpEndpointDescription(BaseModel):
    Name: Optional[HttpEndpointName] = None
    Url: Optional[HttpEndpointUrl] = None


class KinesisStreamSourceConfiguration(BaseModel):
    KinesisStreamARN_1: KinesisStreamARN = Field(..., alias='KinesisStreamARN')
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')


class KinesisStreamSourceDescription(BaseModel):
    DeliveryStartTimestamp_1: Optional[DeliveryStartTimestamp] = Field(
        None, alias='DeliveryStartTimestamp'
    )
    KinesisStreamARN_1: Optional[KinesisStreamARN] = Field(
        None, alias='KinesisStreamARN'
    )
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class ListDeliveryStreamsInput(BaseModel):
    DeliveryStreamType_1: Optional[DeliveryStreamType] = Field(
        None, alias='DeliveryStreamType'
    )
    ExclusiveStartDeliveryStreamName: Optional[DeliveryStreamName] = None
    Limit: Optional[ListDeliveryStreamsInputLimit] = None


class ListOfNonEmptyStrings(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class ListOfNonEmptyStringsWithoutWhitespace(
    RootModel[List[NonEmptyStringWithoutWhitespace]]
):
    root: List[NonEmptyStringWithoutWhitespace]


class ListTagsForDeliveryStreamInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    ExclusiveStartTagKey: Optional[TagKey] = None
    Limit: Optional[ListTagsForDeliveryStreamInputLimit] = None


class OpenXJsonSerDe(BaseModel):
    CaseInsensitive: Optional[BooleanObject] = None
    ColumnToJsonKeyMappings_1: Optional[ColumnToJsonKeyMappings] = Field(
        None, alias='ColumnToJsonKeyMappings'
    )
    ConvertDotsInJsonKeysToUnderscores: Optional[BooleanObject] = None


class OrcSerDe(BaseModel):
    BlockSizeBytes_1: Optional[BlockSizeBytes] = Field(None, alias='BlockSizeBytes')
    BloomFilterColumns: Optional[ListOfNonEmptyStringsWithoutWhitespace] = None
    BloomFilterFalsePositiveProbability: Optional[Proportion] = None
    Compression: Optional[OrcCompression] = None
    DictionaryKeyThreshold: Optional[Proportion] = None
    EnablePadding: Optional[BooleanObject] = None
    FormatVersion: Optional[OrcFormatVersion] = None
    PaddingTolerance: Optional[Proportion] = None
    RowIndexStride: Optional[OrcRowIndexStride] = None
    StripeSizeBytes: Optional[OrcStripeSizeBytes] = None


class ParquetSerDe(BaseModel):
    BlockSizeBytes_1: Optional[BlockSizeBytes] = Field(None, alias='BlockSizeBytes')
    Compression: Optional[ParquetCompression] = None
    EnableDictionaryCompression: Optional[BooleanObject] = None
    MaxPaddingBytes: Optional[NonNegativeIntegerObject] = None
    PageSizeBytes: Optional[ParquetPageSizeBytes] = None
    WriterVersion: Optional[ParquetWriterVersion] = None


class ProcessorParameter(BaseModel):
    ParameterName: ProcessorParameterName
    ParameterValue: ProcessorParameterValue


class ProcessorParameterList(RootModel[List[ProcessorParameter]]):
    root: List[ProcessorParameter]


class PutRecordBatchRequestEntryList(RootModel[List[Record]]):
    root: List[Record] = Field(..., max_length=500, min_length=1)


class PutRecordBatchResponseEntry(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    RecordId: Optional[PutResponseRecordId] = None


class PutRecordBatchResponseEntryList(RootModel[List[PutRecordBatchResponseEntry]]):
    root: List[PutRecordBatchResponseEntry] = Field(..., max_length=500, min_length=1)


class PutRecordInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    Record_1: Record = Field(..., alias='Record')


class PutRecordOutput(BaseModel):
    Encrypted: Optional[BooleanObject] = None
    RecordId: PutResponseRecordId


class S3DestinationConfiguration(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    BufferingHints_1: Optional[BufferingHints] = Field(None, alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: Optional[CompressionFormat] = Field(
        None, alias='CompressionFormat'
    )
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')


class S3DestinationDescription(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    BufferingHints_1: BufferingHints = Field(..., alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: CompressionFormat = Field(..., alias='CompressionFormat')
    EncryptionConfiguration_1: EncryptionConfiguration = Field(
        ..., alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')


class S3DestinationUpdate(BaseModel):
    BucketARN_1: Optional[BucketARN] = Field(None, alias='BucketARN')
    BufferingHints_1: Optional[BufferingHints] = Field(None, alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: Optional[CompressionFormat] = Field(
        None, alias='CompressionFormat'
    )
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class Serializer(BaseModel):
    OrcSerDe_1: Optional[OrcSerDe] = Field(None, alias='OrcSerDe')
    ParquetSerDe_1: Optional[ParquetSerDe] = Field(None, alias='ParquetSerDe')


class SourceDescription(BaseModel):
    KinesisStreamSourceDescription_1: Optional[KinesisStreamSourceDescription] = Field(
        None, alias='KinesisStreamSourceDescription'
    )


class StartDeliveryStreamEncryptionInput(BaseModel):
    DeliveryStreamEncryptionConfigurationInput_1: Optional[
        DeliveryStreamEncryptionConfigurationInput
    ] = Field(None, alias='DeliveryStreamEncryptionConfigurationInput')
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagDeliveryStreamInputTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class DeliveryStreamEncryptionConfiguration(BaseModel):
    FailureDescription_1: Optional[FailureDescription] = Field(
        None, alias='FailureDescription'
    )
    KeyARN: Optional[AWSKMSKeyARN] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    Status: Optional[DeliveryStreamEncryptionStatus] = None


class HiveJsonSerDe(BaseModel):
    TimestampFormats: Optional[ListOfNonEmptyStrings] = None


class ListTagsForDeliveryStreamOutputTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class OutputFormatConfiguration(BaseModel):
    Serializer_1: Optional[Serializer] = Field(None, alias='Serializer')


class Processor(BaseModel):
    Parameters: Optional[ProcessorParameterList] = None
    Type: ProcessorType


class ProcessorList(RootModel[List[Processor]]):
    root: List[Processor]


class PutRecordBatchInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    Records: PutRecordBatchRequestEntryList


class PutRecordBatchOutput(BaseModel):
    Encrypted: Optional[BooleanObject] = None
    FailedPutCount: NonNegativeIntegerObject
    RequestResponses: PutRecordBatchResponseEntryList


class TagDeliveryStreamInput(BaseModel):
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    Tags: TagDeliveryStreamInputTagList


class Deserializer(BaseModel):
    HiveJsonSerDe_1: Optional[HiveJsonSerDe] = Field(None, alias='HiveJsonSerDe')
    OpenXJsonSerDe_1: Optional[OpenXJsonSerDe] = Field(None, alias='OpenXJsonSerDe')


class InputFormatConfiguration(BaseModel):
    Deserializer_1: Optional[Deserializer] = Field(None, alias='Deserializer')


class ListTagsForDeliveryStreamOutput(BaseModel):
    HasMoreTags: BooleanObject
    Tags: ListTagsForDeliveryStreamOutputTagList


class ProcessingConfiguration(BaseModel):
    Enabled: Optional[BooleanObject] = None
    Processors: Optional[ProcessorList] = None


class RedshiftDestinationConfiguration(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterJDBCURL_1: ClusterJDBCURL = Field(..., alias='ClusterJDBCURL')
    CopyCommand_1: CopyCommand = Field(..., alias='CopyCommand')
    Password_1: Password = Field(..., alias='Password')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[RedshiftRetryOptions] = None
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupConfiguration: Optional[S3DestinationConfiguration] = None
    S3BackupMode: Optional[RedshiftS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration
    Username_1: Username = Field(..., alias='Username')


class RedshiftDestinationDescription(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterJDBCURL_1: ClusterJDBCURL = Field(..., alias='ClusterJDBCURL')
    CopyCommand_1: CopyCommand = Field(..., alias='CopyCommand')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[RedshiftRetryOptions] = None
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupDescription: Optional[S3DestinationDescription] = None
    S3BackupMode: Optional[RedshiftS3BackupMode] = None
    S3DestinationDescription_1: S3DestinationDescription = Field(
        ..., alias='S3DestinationDescription'
    )
    Username_1: Username = Field(..., alias='Username')


class RedshiftDestinationUpdate(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterJDBCURL_1: Optional[ClusterJDBCURL] = Field(None, alias='ClusterJDBCURL')
    CopyCommand_1: Optional[CopyCommand] = Field(None, alias='CopyCommand')
    Password_1: Optional[Password] = Field(None, alias='Password')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[RedshiftRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[RedshiftS3BackupMode] = None
    S3BackupUpdate: Optional[S3DestinationUpdate] = None
    S3Update: Optional[S3DestinationUpdate] = None
    Username_1: Optional[Username] = Field(None, alias='Username')


class SplunkDestinationConfiguration(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    HECAcknowledgmentTimeoutInSeconds_1: Optional[HECAcknowledgmentTimeoutInSeconds] = (
        Field(None, alias='HECAcknowledgmentTimeoutInSeconds')
    )
    HECEndpoint_1: HECEndpoint = Field(..., alias='HECEndpoint')
    HECEndpointType_1: HECEndpointType = Field(..., alias='HECEndpointType')
    HECToken_1: HECToken = Field(..., alias='HECToken')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[SplunkRetryOptions] = None
    S3BackupMode: Optional[SplunkS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration


class SplunkDestinationDescription(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    HECAcknowledgmentTimeoutInSeconds_1: Optional[HECAcknowledgmentTimeoutInSeconds] = (
        Field(None, alias='HECAcknowledgmentTimeoutInSeconds')
    )
    HECEndpoint_1: Optional[HECEndpoint] = Field(None, alias='HECEndpoint')
    HECEndpointType_1: Optional[HECEndpointType] = Field(None, alias='HECEndpointType')
    HECToken_1: Optional[HECToken] = Field(None, alias='HECToken')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[SplunkRetryOptions] = None
    S3BackupMode: Optional[SplunkS3BackupMode] = None
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )


class SplunkDestinationUpdate(BaseModel):
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    HECAcknowledgmentTimeoutInSeconds_1: Optional[HECAcknowledgmentTimeoutInSeconds] = (
        Field(None, alias='HECAcknowledgmentTimeoutInSeconds')
    )
    HECEndpoint_1: Optional[HECEndpoint] = Field(None, alias='HECEndpoint')
    HECEndpointType_1: Optional[HECEndpointType] = Field(None, alias='HECEndpointType')
    HECToken_1: Optional[HECToken] = Field(None, alias='HECToken')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[SplunkRetryOptions] = None
    S3BackupMode: Optional[SplunkS3BackupMode] = None
    S3Update: Optional[S3DestinationUpdate] = None


class AmazonOpenSearchServerlessDestinationConfiguration(BaseModel):
    BufferingHints: Optional[AmazonOpenSearchServerlessBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CollectionEndpoint: Optional[AmazonOpenSearchServerlessCollectionEndpoint] = None
    IndexName: AmazonOpenSearchServerlessIndexName
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonOpenSearchServerlessRetryOptions] = None
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupMode: Optional[AmazonOpenSearchServerlessS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration
    VpcConfiguration_1: Optional[VpcConfiguration] = Field(
        None, alias='VpcConfiguration'
    )


class AmazonOpenSearchServerlessDestinationDescription(BaseModel):
    BufferingHints: Optional[AmazonOpenSearchServerlessBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CollectionEndpoint: Optional[AmazonOpenSearchServerlessCollectionEndpoint] = None
    IndexName: Optional[AmazonOpenSearchServerlessIndexName] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonOpenSearchServerlessRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[AmazonOpenSearchServerlessS3BackupMode] = None
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )
    VpcConfigurationDescription_1: Optional[VpcConfigurationDescription] = Field(
        None, alias='VpcConfigurationDescription'
    )


class AmazonOpenSearchServerlessDestinationUpdate(BaseModel):
    BufferingHints: Optional[AmazonOpenSearchServerlessBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CollectionEndpoint: Optional[AmazonOpenSearchServerlessCollectionEndpoint] = None
    IndexName: Optional[AmazonOpenSearchServerlessIndexName] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonOpenSearchServerlessRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3Update: Optional[S3DestinationUpdate] = None


class AmazonopensearchserviceDestinationConfiguration(BaseModel):
    BufferingHints: Optional[AmazonopensearchserviceBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[AmazonopensearchserviceClusterEndpoint] = None
    DomainARN: Optional[AmazonopensearchserviceDomainARN] = None
    IndexName: AmazonopensearchserviceIndexName
    IndexRotationPeriod: Optional[AmazonopensearchserviceIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonopensearchserviceRetryOptions] = None
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupMode: Optional[AmazonopensearchserviceS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration
    TypeName: Optional[AmazonopensearchserviceTypeName] = None
    VpcConfiguration_1: Optional[VpcConfiguration] = Field(
        None, alias='VpcConfiguration'
    )


class AmazonopensearchserviceDestinationDescription(BaseModel):
    BufferingHints: Optional[AmazonopensearchserviceBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[AmazonopensearchserviceClusterEndpoint] = None
    DomainARN: Optional[AmazonopensearchserviceDomainARN] = None
    IndexName: Optional[AmazonopensearchserviceIndexName] = None
    IndexRotationPeriod: Optional[AmazonopensearchserviceIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonopensearchserviceRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[AmazonopensearchserviceS3BackupMode] = None
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )
    TypeName: Optional[AmazonopensearchserviceTypeName] = None
    VpcConfigurationDescription_1: Optional[VpcConfigurationDescription] = Field(
        None, alias='VpcConfigurationDescription'
    )


class AmazonopensearchserviceDestinationUpdate(BaseModel):
    BufferingHints: Optional[AmazonopensearchserviceBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[AmazonopensearchserviceClusterEndpoint] = None
    DomainARN: Optional[AmazonopensearchserviceDomainARN] = None
    IndexName: Optional[AmazonopensearchserviceIndexName] = None
    IndexRotationPeriod: Optional[AmazonopensearchserviceIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[AmazonopensearchserviceRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3Update: Optional[S3DestinationUpdate] = None
    TypeName: Optional[AmazonopensearchserviceTypeName] = None


class DataFormatConversionConfiguration(BaseModel):
    Enabled: Optional[BooleanObject] = None
    InputFormatConfiguration_1: Optional[InputFormatConfiguration] = Field(
        None, alias='InputFormatConfiguration'
    )
    OutputFormatConfiguration_1: Optional[OutputFormatConfiguration] = Field(
        None, alias='OutputFormatConfiguration'
    )
    SchemaConfiguration_1: Optional[SchemaConfiguration] = Field(
        None, alias='SchemaConfiguration'
    )


class ElasticsearchDestinationConfiguration(BaseModel):
    BufferingHints: Optional[ElasticsearchBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[ElasticsearchClusterEndpoint] = None
    DomainARN: Optional[ElasticsearchDomainARN] = None
    IndexName: ElasticsearchIndexName
    IndexRotationPeriod: Optional[ElasticsearchIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[ElasticsearchRetryOptions] = None
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupMode: Optional[ElasticsearchS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration
    TypeName: Optional[ElasticsearchTypeName] = None
    VpcConfiguration_1: Optional[VpcConfiguration] = Field(
        None, alias='VpcConfiguration'
    )


class ElasticsearchDestinationDescription(BaseModel):
    BufferingHints: Optional[ElasticsearchBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[ElasticsearchClusterEndpoint] = None
    DomainARN: Optional[ElasticsearchDomainARN] = None
    IndexName: Optional[ElasticsearchIndexName] = None
    IndexRotationPeriod: Optional[ElasticsearchIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[ElasticsearchRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[ElasticsearchS3BackupMode] = None
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )
    TypeName: Optional[ElasticsearchTypeName] = None
    VpcConfigurationDescription_1: Optional[VpcConfigurationDescription] = Field(
        None, alias='VpcConfigurationDescription'
    )


class ElasticsearchDestinationUpdate(BaseModel):
    BufferingHints: Optional[ElasticsearchBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    ClusterEndpoint: Optional[ElasticsearchClusterEndpoint] = None
    DomainARN: Optional[ElasticsearchDomainARN] = None
    IndexName: Optional[ElasticsearchIndexName] = None
    IndexRotationPeriod: Optional[ElasticsearchIndexRotationPeriod] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RetryOptions: Optional[ElasticsearchRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3Update: Optional[S3DestinationUpdate] = None
    TypeName: Optional[ElasticsearchTypeName] = None


class ExtendedS3DestinationConfiguration(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    BufferingHints_1: Optional[BufferingHints] = Field(None, alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: Optional[CompressionFormat] = Field(
        None, alias='CompressionFormat'
    )
    DataFormatConversionConfiguration_1: Optional[DataFormatConversionConfiguration] = (
        Field(None, alias='DataFormatConversionConfiguration')
    )
    DynamicPartitioningConfiguration_1: Optional[DynamicPartitioningConfiguration] = (
        Field(None, alias='DynamicPartitioningConfiguration')
    )
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupConfiguration: Optional[S3DestinationConfiguration] = None
    S3BackupMode_1: Optional[S3BackupMode] = Field(None, alias='S3BackupMode')


class ExtendedS3DestinationDescription(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    BufferingHints_1: BufferingHints = Field(..., alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: CompressionFormat = Field(..., alias='CompressionFormat')
    DataFormatConversionConfiguration_1: Optional[DataFormatConversionConfiguration] = (
        Field(None, alias='DataFormatConversionConfiguration')
    )
    DynamicPartitioningConfiguration_1: Optional[DynamicPartitioningConfiguration] = (
        Field(None, alias='DynamicPartitioningConfiguration')
    )
    EncryptionConfiguration_1: EncryptionConfiguration = Field(
        ..., alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RoleARN_1: RoleARN = Field(..., alias='RoleARN')
    S3BackupDescription: Optional[S3DestinationDescription] = None
    S3BackupMode_1: Optional[S3BackupMode] = Field(None, alias='S3BackupMode')


class ExtendedS3DestinationUpdate(BaseModel):
    BucketARN_1: Optional[BucketARN] = Field(None, alias='BucketARN')
    BufferingHints_1: Optional[BufferingHints] = Field(None, alias='BufferingHints')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    CompressionFormat_1: Optional[CompressionFormat] = Field(
        None, alias='CompressionFormat'
    )
    DataFormatConversionConfiguration_1: Optional[DataFormatConversionConfiguration] = (
        Field(None, alias='DataFormatConversionConfiguration')
    )
    DynamicPartitioningConfiguration_1: Optional[DynamicPartitioningConfiguration] = (
        Field(None, alias='DynamicPartitioningConfiguration')
    )
    EncryptionConfiguration_1: Optional[EncryptionConfiguration] = Field(
        None, alias='EncryptionConfiguration'
    )
    ErrorOutputPrefix_1: Optional[ErrorOutputPrefix] = Field(
        None, alias='ErrorOutputPrefix'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode_1: Optional[S3BackupMode] = Field(None, alias='S3BackupMode')
    S3BackupUpdate: Optional[S3DestinationUpdate] = None


class HttpEndpointDestinationConfiguration(BaseModel):
    BufferingHints: Optional[HttpEndpointBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    EndpointConfiguration: HttpEndpointConfiguration
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RequestConfiguration: Optional[HttpEndpointRequestConfiguration] = None
    RetryOptions: Optional[HttpEndpointRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[HttpEndpointS3BackupMode] = None
    S3Configuration: S3DestinationConfiguration


class HttpEndpointDestinationDescription(BaseModel):
    BufferingHints: Optional[HttpEndpointBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    EndpointConfiguration: Optional[HttpEndpointDescription] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RequestConfiguration: Optional[HttpEndpointRequestConfiguration] = None
    RetryOptions: Optional[HttpEndpointRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[HttpEndpointS3BackupMode] = None
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )


class HttpEndpointDestinationUpdate(BaseModel):
    BufferingHints: Optional[HttpEndpointBufferingHints] = None
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    EndpointConfiguration: Optional[HttpEndpointConfiguration] = None
    ProcessingConfiguration_1: Optional[ProcessingConfiguration] = Field(
        None, alias='ProcessingConfiguration'
    )
    RequestConfiguration: Optional[HttpEndpointRequestConfiguration] = None
    RetryOptions: Optional[HttpEndpointRetryOptions] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    S3BackupMode: Optional[HttpEndpointS3BackupMode] = None
    S3Update: Optional[S3DestinationUpdate] = None


class UpdateDestinationInput(BaseModel):
    AmazonOpenSearchServerlessDestinationUpdate_1: Optional[
        AmazonOpenSearchServerlessDestinationUpdate
    ] = Field(None, alias='AmazonOpenSearchServerlessDestinationUpdate')
    AmazonopensearchserviceDestinationUpdate_1: Optional[
        AmazonopensearchserviceDestinationUpdate
    ] = Field(None, alias='AmazonopensearchserviceDestinationUpdate')
    CurrentDeliveryStreamVersionId: DeliveryStreamVersionId
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    DestinationId_1: DestinationId = Field(..., alias='DestinationId')
    ElasticsearchDestinationUpdate_1: Optional[ElasticsearchDestinationUpdate] = Field(
        None, alias='ElasticsearchDestinationUpdate'
    )
    ExtendedS3DestinationUpdate_1: Optional[ExtendedS3DestinationUpdate] = Field(
        None, alias='ExtendedS3DestinationUpdate'
    )
    HttpEndpointDestinationUpdate_1: Optional[HttpEndpointDestinationUpdate] = Field(
        None, alias='HttpEndpointDestinationUpdate'
    )
    RedshiftDestinationUpdate_1: Optional[RedshiftDestinationUpdate] = Field(
        None, alias='RedshiftDestinationUpdate'
    )
    S3DestinationUpdate_1: Optional[S3DestinationUpdate] = Field(
        None, alias='S3DestinationUpdate'
    )
    SplunkDestinationUpdate_1: Optional[SplunkDestinationUpdate] = Field(
        None, alias='SplunkDestinationUpdate'
    )


class CreateDeliveryStreamInput(BaseModel):
    AmazonOpenSearchServerlessDestinationConfiguration_1: Optional[
        AmazonOpenSearchServerlessDestinationConfiguration
    ] = Field(None, alias='AmazonOpenSearchServerlessDestinationConfiguration')
    AmazonopensearchserviceDestinationConfiguration_1: Optional[
        AmazonopensearchserviceDestinationConfiguration
    ] = Field(None, alias='AmazonopensearchserviceDestinationConfiguration')
    DeliveryStreamEncryptionConfigurationInput_1: Optional[
        DeliveryStreamEncryptionConfigurationInput
    ] = Field(None, alias='DeliveryStreamEncryptionConfigurationInput')
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    DeliveryStreamType_1: Optional[DeliveryStreamType] = Field(
        None, alias='DeliveryStreamType'
    )
    ElasticsearchDestinationConfiguration_1: Optional[
        ElasticsearchDestinationConfiguration
    ] = Field(None, alias='ElasticsearchDestinationConfiguration')
    ExtendedS3DestinationConfiguration_1: Optional[
        ExtendedS3DestinationConfiguration
    ] = Field(None, alias='ExtendedS3DestinationConfiguration')
    HttpEndpointDestinationConfiguration_1: Optional[
        HttpEndpointDestinationConfiguration
    ] = Field(None, alias='HttpEndpointDestinationConfiguration')
    KinesisStreamSourceConfiguration_1: Optional[KinesisStreamSourceConfiguration] = (
        Field(None, alias='KinesisStreamSourceConfiguration')
    )
    RedshiftDestinationConfiguration_1: Optional[RedshiftDestinationConfiguration] = (
        Field(None, alias='RedshiftDestinationConfiguration')
    )
    S3DestinationConfiguration_1: Optional[S3DestinationConfiguration] = Field(
        None, alias='S3DestinationConfiguration'
    )
    SplunkDestinationConfiguration_1: Optional[SplunkDestinationConfiguration] = Field(
        None, alias='SplunkDestinationConfiguration'
    )
    Tags: Optional[TagDeliveryStreamInputTagList] = None


class DestinationDescription(BaseModel):
    AmazonOpenSearchServerlessDestinationDescription_1: Optional[
        AmazonOpenSearchServerlessDestinationDescription
    ] = Field(None, alias='AmazonOpenSearchServerlessDestinationDescription')
    AmazonopensearchserviceDestinationDescription_1: Optional[
        AmazonopensearchserviceDestinationDescription
    ] = Field(None, alias='AmazonopensearchserviceDestinationDescription')
    DestinationId_1: DestinationId = Field(..., alias='DestinationId')
    ElasticsearchDestinationDescription_1: Optional[
        ElasticsearchDestinationDescription
    ] = Field(None, alias='ElasticsearchDestinationDescription')
    ExtendedS3DestinationDescription_1: Optional[ExtendedS3DestinationDescription] = (
        Field(None, alias='ExtendedS3DestinationDescription')
    )
    HttpEndpointDestinationDescription_1: Optional[
        HttpEndpointDestinationDescription
    ] = Field(None, alias='HttpEndpointDestinationDescription')
    RedshiftDestinationDescription_1: Optional[RedshiftDestinationDescription] = Field(
        None, alias='RedshiftDestinationDescription'
    )
    S3DestinationDescription_1: Optional[S3DestinationDescription] = Field(
        None, alias='S3DestinationDescription'
    )
    SplunkDestinationDescription_1: Optional[SplunkDestinationDescription] = Field(
        None, alias='SplunkDestinationDescription'
    )


class DestinationDescriptionList(RootModel[List[DestinationDescription]]):
    root: List[DestinationDescription]


class DeliveryStreamDescription(BaseModel):
    CreateTimestamp: Optional[Timestamp] = None
    DeliveryStreamARN_1: DeliveryStreamARN = Field(..., alias='DeliveryStreamARN')
    DeliveryStreamEncryptionConfiguration_1: Optional[
        DeliveryStreamEncryptionConfiguration
    ] = Field(None, alias='DeliveryStreamEncryptionConfiguration')
    DeliveryStreamName_1: DeliveryStreamName = Field(..., alias='DeliveryStreamName')
    DeliveryStreamStatus_1: DeliveryStreamStatus = Field(
        ..., alias='DeliveryStreamStatus'
    )
    DeliveryStreamType_1: DeliveryStreamType = Field(..., alias='DeliveryStreamType')
    Destinations: DestinationDescriptionList
    FailureDescription_1: Optional[FailureDescription] = Field(
        None, alias='FailureDescription'
    )
    HasMoreDestinations: BooleanObject
    LastUpdateTimestamp: Optional[Timestamp] = None
    Source: Optional[SourceDescription] = None
    VersionId: DeliveryStreamVersionId


class DescribeDeliveryStreamOutput(BaseModel):
    DeliveryStreamDescription_1: DeliveryStreamDescription = Field(
        ..., alias='DeliveryStreamDescription'
    )
